name: Build & Release (NeoForge)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      mc_versions:
        description: 'Minecraft versions (Example: ["1.21.1"])'
        required: false
        default: '["1.21.1"]'

permissions:
  contents: write

concurrency:
  group: build-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Simple extension point: you can override the JSON array of versions when running manually
        minecraft: ${{ fromJSON(github.event.inputs.mc_versions || '["1.21.1"]') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java 21 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21' # NeoForge recommended JDK 21

      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v4

      - name: Make Gradle wrapper executable (Linux)
        run: chmod +x gradlew

      - name: Build (NeoForge)
        env:
          MC_VERSION: ${{ matrix.minecraft }}
        run: |
          ./gradlew --build-cache clean build -Pminecraft_version=${MC_VERSION} --stacktrace

      - name: Locate release jar
        id: jar
        shell: bash
        run: |
          shopt -s nullglob
          release=""
          for f in build/libs/*.jar; do
            case "$f" in
              *-sources.jar|*-javadoc.jar|*-dev*.jar|*-slim*.jar) continue;;
              *) release="$f"; break;;
            esac
          done
          if [[ -z "$release" ]]; then
            echo "No release jar in build/libs"; ls -al build/libs || true; exit 1
          fi
          echo "path=$release" >> "$GITHUB_OUTPUT"
          echo "name=$(basename "$release")" >> "$GITHUB_OUTPUT"

      - name: Upload jar artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-${{ matrix.minecraft }}
          path: ${{ steps.jar.outputs.path }}

  release:
    if: ${{ github.event_name != 'pull_request' }}
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout for tagging/bump
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all built jars
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: jar-*
          merge-multiple: true

      - name: Read current & next version
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          CUR=""; FILE="gradle.properties"
          if [[ -f "$FILE" ]]; then
            if grep -qE '^mod_version=' "$FILE"; then
              CUR=$(grep -E '^mod_version=' "$FILE" | head -n1 | cut -d= -f2)
              KEY="mod_version"
            elif grep -qE '^version=' "$FILE"; then
              CUR=$(grep -E '^version=' "$FILE" | head -n1 | cut -d= -f2)
              KEY="version"
            else
              KEY="version"; CUR=""
            fi
          else
            KEY="version"
          fi
          if [[ -z "${CUR}" ]]; then CUR="1.0.5"; fi

          IFS=. read -r MAJ MIN PATCH <<<"$CUR"
          PATCH=$((PATCH+1))
          NEXT="${MAJ}.${MIN}.${PATCH}"

          echo "current=$CUR" >> "$GITHUB_OUTPUT"
          echo "next=$NEXT" >> "$GITHUB_OUTPUT"
          echo "file_key=$KEY" >> "$GITHUB_OUTPUT"

#      - name: Bump version for next release and push
#        if: ${{ github.ref == 'refs/heads/main' }}
#        run: |
#          KEY='${{ steps.ver.outputs.file_key }}'
#          NEXT='${{ steps.ver.outputs.next }}'
#          FILE="gradle.properties"
#          if [[ -f "$FILE" ]]; then
#            if grep -qE "^$KEY=" "$FILE"; then
#              sed -i -E "s/^$KEY=.*/$KEY=$NEXT/" "$FILE"
#            else
#              echo "$KEY=$NEXT" >> "$FILE"
#            fi
#          else
#            echo "$KEY=$NEXT" > "$FILE"
#          fi
#          git config user.name "github-actions[bot]"
#          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
#          git add "$FILE"
#          git commit -m "chore: bump version to $NEXT [skip ci]"
#          git push

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.ver.outputs.current }}
          name: v${{ steps.ver.outputs.current }}
          files: dist/*.jar
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}